# -*- coding: utf-8 -*-
"""class practise lets_upgrade python

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14BaZxggSslkbu4hoK1M1ecL7c5QzYjju
"""

str = 'naman'
a = str.split('')
a.reverse()
b= ''.join(a)
if a ==b:
  print("palindromic")
else:
  print("not")

dictionary = {'a':1, 'b':2, 'c':2}
value = 2

def reverseLookup(dictionary, value):
  a = [key for key,values in dictionary.items() if values == value]
  b = a.sort()
  return b
reverseLookup(dictionary, value)

for i in range(1,10,1):
  a =list()
  a+=i
  print(a)
for j in range(-1,-5,-1):
  print(j)

string = 'harsh'
print(string.index(a))

def replacenum(n):
  a =[]
  for i in range(1,n+1):
   if i%3==0:
    a.append("Fizz")
   elif i%5==0:
    a.append("Buzz")
   elif i%3==0 and i%5==0:
    a.append("FizzBuzz")
   else:
    a.append(i)
  print(a)
replacenum(50)

def string_(s):
  a=''
  for i in range(len(s)):
    s=s+'_'
  print(s)
string_('harsh')

def anagram(s,a):
  for i in s:
    if i in a:
      continue
    else:
      print('not anagram')
      break
  if i== s[-1]:
    print('amagram')
anagram('harsh','srahh')

def delete_values(L):
  L.remove(L[0])
  L.remove(L[-1])
  print(L)
delete_values([1,2,3,4,5,6,7])

def valuetoindex(l):
  a=[]
  for i in l:
    a.append(l.index(i))
  print(a)
valuetoindex([9,7,5,6,3,4,2,8])

def reverse_dict(dict):
  a={}
  for i in dict.keys():
    a[dict[i]]=i
  print(a)
reverse_dict({'a':1,'b':2,'c':3,'d':4})

def fibonacci(n):
  b=0
  c=1
  a=[b,c]
  sum=0
  for i in range(n-2):
    a.append(b+c)
    c=b+c
    b=c
  print(a)
fibonacci(10)



def replacevowel(s):
  vowel = 'aeiouAEIOU'
  a=''
  for i in s:
    if i in vowel:
      if i in a[-1]:
        continue
      else:
        a+=i
    else:
      a+=i
  print(a)
replacevowel('habarsheeauE')

def unionlist(list1,list2):
  print(list(set(list1).union(set(list2))))
unionlist([1,2,3,4],[2,6,8,9,3])

def booksize_numcount(n):
  a=0
  for i in range(n):
    a += len(str(i))
  print(a)
booksize_numcount(20)

"""generators and  iterators

"""

def fibonacci(n):
  b=0
  c=1
  sum=0
  for i in range(n-2):
    a.append(b+c)
    c=b+c
    b=c
  yield a
for i in fibonacci(10):
  print(i)

def gen_square(n):
  for i in range(n):
    yield n**2
for i in gen_square(10):
  print(i)

import random
def gen_randomnum(low,high,count):
  for i in range(0,count):
    yield random.randint(low,high)
for a in gen_randomnum(1,20,7):
  print(a)

def useiter(s):
  a=iter(s)
  for i in a:
    yield i
for b in useiter('genius'):
  print(b)

s = 'genius'
a = iter(s)
for i in range(len(s)):
  print(next(a))

"""
***Counters, colllections, defaultdict , datetime ***


"""

import collections
from collections import defaultdict
d = defaultdict(lambda: 2)
d['one','two']
for i in d:
  print(i)
for i in d:
  print(d[i])

if __name__ == '__main__':
    a = []
    for _ in range(int(input())):
        name = input()
        score = float(input())
        a +=[name,score]
    print(a)
    b = [score for name,score in a]
    list(set(sorted(b)))
    print(name for name,score in a if score==b[1])

"""zif , unzip

"""

import zipfile

import zipfile
f = open('myfile.txt','w+')
f.write("hello ,file is created")
#now zip file
compress_file = zipfile.ZipFile('new_file.zip','w')
compress_file.write("myfile.txt",compress_type=zipfile.ZIP_DEFLATED)
compress_file.close()
#now unzip file
unzip_file = zipfile.ZipFile('new_file.zip','r')
unzip_file.extractall('extracted_file')

print("Welcome to Tic Tac Toe")
print("Press 1 to start game")
print("press 2 to know how to play")
a = input("please enter the option : ")
def menu(a):
  if a ==1:
    print("welcome game is starting for you")
    #will call function to start game
  else:
    print("You can learn to play this game")
    #will print documentation of game
    def startgame()  
print("***Please enter your names***")
name1 = input("Enter your name : ")
print(f"Welcome {name1} you are first player")
name2 = input("Enter your name : ")
print(f"Welcome {name2} you are second player")
print("input values when you are ask to do")
a.input()
b.input()
board = ['-', '-', '-',
         '-', '-', '-',
         '-', '-', '-']
board=['_','_','_','X','0','X','_','_','_',]
print(board[0]+ " | "+ board[1]+" | "+ board[2])
print(board[3]+ " | "+ board[4]+" | "+ board[5])
print(board[6]+ " | "+ board[7]+" | "+ board[8])

board=['_','_','_','X','0','X','-','-','-',]
print(board[0]+ " | "+ board[1]+" | "+ board[2])
print(board[3]+ " | "+ board[4]+" | "+ board[5])
print(board[6]+ " | "+ board[7]+" | "+ board[8])

def display_board(board):
  print(board[0]+ " | "+ board[1]+" | "+ board[2])
  print(board[3]+ " | "+ board[4]+" | "+ board[5])
  print(board[6]+ " | "+ board[7]+" | "+ board[8]) 
  display_board(board)
  display_board(board)
board=['_','_','_','X','0','X','-','-','-',]
display_board(board)

def player_input():
  print(player1)
  print(player2)
while not (letter == 'X' or letter == 'O'):

 26.         print('Do you want to be X or O?')
       letter = input().upper()
       
        return ['X', 'O']
      else:
         return ['O', 'X']

'''def take_input(board_list,marker,num):
   if board_list == 'yes':
     board = []
     while i <9:
       a = input(f'input board list on index {i} :')
       board.append(a)
    return board
  if marker == 'yes':
    '''
'''def take_input(board, marker , position):
  board[position]=marker
  display(board)'''
def win_check_in_row_column(board,mark):
  '''check condition of different rows and column
   and assign to row/column associated to them'''
  row1=board[1]==board[2]==board[3] == mark
  row2=board[4]==board[5]==board[6]==mark
  row3=board[7]==board[8]==board[9]==mark
  column1=board[1]==board[4]==board[7]==mark
  column2=board[2]==board[5]==board[8]==mark
  column3=board[3]==board[6]==board[9]==mark
  '''check condition and return that row/column
   for which condition is true'''
  if row1 == True: return row1
  if row2 == True: return row2
  if row3 == True:return row3
  if column1 == True: return column1
  if column2 == True: return column2
  if column3 == True: return column3
import random
import randint() from random

def checkboard():
 for i in len(board):
  if board[i]==' ':
    retrun True
  else:
    return False
def checkboard():
 for i in len(board):
  if board[i]!=' ':
    retrun True
  else:
    return False
def checkboard(board):
    if ' ' in board:
      return False
    else:
      return True

"""
**tic tac toe game**"""

# --------- Global Variables -----------

# Will hold our game board data
board = ["-", "-", "-",
         "-", "-", "-",
         "-", "-", "-"]

# Lets us know if the game is over yet
game_still_going = True

# Tells us who the winner is
winner = None

# Tells us who the current player is (X goes first)
current_player = "X"


# ------------- Functions ---------------

# Play a game of tic tac toe
def play_game():

  # Show the initial game board
  display_board()

  # Loop until the game stops (winner or tie)
  while game_still_going:

    # Handle a turn
    handle_turn(current_player)

    # Check if the game is over
    check_if_game_over()

    # Flip to the other player
    flip_player()
  
  # Since the game is over, print the winner or tie
  if winner == "X" or winner == "O":
    print(winner + " won.")
  elif winner == None:
    print("Tie.")


# Display the game board to the screen
def display_board():
  print("\n")
  print(board[0] + " | " + board[1] + " | " + board[2] + "     1 | 2 | 3")
  print(board[3] + " | " + board[4] + " | " + board[5] + "     4 | 5 | 6")
  print(board[6] + " | " + board[7] + " | " + board[8] + "     7 | 8 | 9")
  print("\n")


# Handle a turn for an arbitrary player
def handle_turn(player):

  # Get position from player
  print(player + "'s turn.")
  position = input("Choose a position from 1-9: ")

  # Whatever the user inputs, make sure it is a valid input, and the spot is open
  valid = False
  while not valid:

    # Make sure the input is valid
    while position not in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
      position = input("Choose a position from 1-9: ")
 
    # Get correct index in our board list
    position = int(position) - 1

    # Then also make sure the spot is available on the board
    if board[position] == "-":
      valid = True
    else:
      print("You can't go there. Go again.")

  # Put the game piece on the board
  board[position] = player

  # Show the game board
  display_board()


# Check if the game is over
def check_if_game_over():
  check_for_winner()
  check_for_tie()


# Check to see if somebody has won
def check_for_winner():
  # Set global variables
  global winner
  # Check if there was a winner anywhere
  row_winner = check_rows()
  column_winner = check_columns()
  diagonal_winner = check_diagonals()
  # Get the winner
  if row_winner:
    winner = row_winner
  elif column_winner:
    winner = column_winner
  elif diagonal_winner:
    winner = diagonal_winner
  else:
    winner = None


# Check the rows for a win
def check_rows():
  # Set global variables
  global game_still_going
  # Check if any of the rows have all the same value (and is not empty)
  row_1 = board[0] == board[1] == board[2] != "-"
  row_2 = board[3] == board[4] == board[5] != "-"
  row_3 = board[6] == board[7] == board[8] != "-"
  # If any row does have a match, flag that there is a win
  if row_1 or row_2 or row_3:
    game_still_going = False
  # Return the winner
  if row_1:
    return board[0] 
  elif row_2:
    return board[3] 
  elif row_3:
    return board[6] 
  # Or return None if there was no winner
  else:
    return None


# Check the columns for a win
def check_columns():
  # Set global variables
  global game_still_going
  # Check if any of the columns have all the same value (and is not empty)
  column_1 = board[0] == board[3] == board[6] != "-"
  column_2 = board[1] == board[4] == board[7] != "-"
  column_3 = board[2] == board[5] == board[8] != "-"
  # If any row does have a match, flag that there is a win
  if column_1 or column_2 or column_3:
    game_still_going = False
  # Return the winner
  if column_1:
    return board[0] 
  elif column_2:
    return board[1] 
  elif column_3:
    return board[2] 
  # Or return None if there was no winner
  else:
    return None


# Check the diagonals for a win
def check_diagonals():
  # Set global variables
  global game_still_going
  # Check if any of the columns have all the same value (and is not empty)
  diagonal_1 = board[0] == board[4] == board[8] != "-"
  diagonal_2 = board[2] == board[4] == board[6] != "-"
  # If any row does have a match, flag that there is a win
  if diagonal_1 or diagonal_2:
    game_still_going = False
  # Return the winner
  if diagonal_1:
    return board[0] 
  elif diagonal_2:
    return board[2]
  # Or return None if there was no winner
  else:
    return None


# Check if there is a tie
def check_for_tie():
  # Set global variables
  global game_still_going
  # If board is full
  if "-" not in board:
    game_still_going = False
    return True
  # Else there is no tie
  else:
    return False


# Flip the current player from X to O, or O to X
def flip_player():
  # Global variables we need
  global current_player
  # If the current player was X, make it O
  if current_player == "X":
    current_player = "O"
  # Or if the current player was O, make it X
  elif current_player == "O":
    current_player = "X"


# ------------ Start Execution -------------
# Play a game of tic tac toe
play_game()

board = ["-", "-", "-",
         "-", "-", "-",
         "-", "-", "-"]
  print("\n")
  print(board[0] + " | " + board[1] + " | " + board[2] + "     1 | 2 | 3")
  print(board[3] + " | " + board[4] + " | " + board[5] + "     4 | 5 | 6")
  print(board[6] + " | " + board[7] + " | " + board[8] + "     7 | 8 | 9")
  print("\n")

def taketurn(player):
  fool = False
 
  print(player + "your turn.")
  position = input("Choose a position from 1-9: ")
    position = int(position) - 1

while fool:
    if board[position] == "-":
      fool = True
    else:
      print("You can't go there. Go again.")
      taketurn(player)
def ask_user:
  a = input("do you want to play again ?: yes or no : ").lower().startswith('y')
  if a :
    player_choice(board)
  else:
    print("thanks")
print("Welcome to Tic Tac Toe")
print("Press 1 to start game")
a = input("please enter the option : ")
def menu(a):
  if a ==1:
    print("welcome game is starting for you")
    play_game()
def play_game()  
print("***Please enter your names***")
name1 = input("Enter your name : ")
print(f"Welcome {name1} you are first player")
name2 = input("Enter your name : ")
print(f"Welcome {name2} you are second player")
print("welcome to tik tac toe")
display_board()
game_going_on=True
while game_going_on:
  player_turn(player)
  player_choice(board)
  check_winner()
  if winner:
    print(winner)
    game_going_on =False
turn = 'player 2':
display_bopard(theBoard)
position = player_choice(theBoard)
place_marker(theBoard,player1_marker,position)
#now we will check winner and proceed to player 1 if no win

def w_len(s):
  a = list(map(len,s.split()))
  return a
print(w_len('my name is xyz'))

from functools import reduce
def digit_to_num(lis):
  a = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 
            5: 'five', 6: 'six', 7: 'seven', 8: 'eight',
            9: 'nine'}
  return list(reduce(a[],lis))
print(digit_to_num([1 ,2, 3]))

def word(s,letter):
  a = len(s.split())
  for i in range(a):
    return list(filter(s[i].startswith(letter)))
word('my name is xyz','m')

def concetnate(l1,l2,connector):
  return list(i+connector+j for i in l1 for j in l2 if l1.index(i)==l2.index(j))
concetnate(['a','b'],['c','d'],'_')

def d_list(L):
  return dict((values,key) for key,values in enumerate(L))
d_list(['a','b','c'])

def count_index(L):
  count = []
  for key,value in enumerate(L):
    if key==value:
      count.append(key)
    else:
      pass
  return len(count)
count_index(['0','1','2'])

from PIL import image
ima = Image.open(r"C:\mask.png")
#size of original image
width, height = ima.size
#now set points to crop
left = 4
top = height/3
right = 160
bottom = 2* height/3
ima_cropped = ima.crop((left,top,right,bottom))
ima_cropped.show()

"""web scrapping"""

pip install requests

pip install lxml

pip install bs4

pip list



"""3 sept web scrapping day 3 """

#import any libraries to scrape a sit
import requests
import bs4
base_yrl = 'https://quotes.toscrape.com/page-{}.html'
res = requests.get('https://quotes.toscrape.com/')
soup = bs4.BeautifulSoup(res.text,'lxml')
soup.select('base_yrl')

import requests
import bs4
base_yrl = 'https://quotes.toscrape.com/'
res = requests.get(base_yrl)
soup = bs4.BeautifulSoup(res.text,'lxml')
# a = soup.select('.author')
c = []
# for i in len(str(a)):
#   b= soup.select('a'['1']['author'])
#   if b not in c:
#     c.append(b)
#   else:
#     pass
for i in

#create a list of all the quotes on first page
import requests
import bs4
base_url = 'https://quotes.toscrape.com/'
soup = bs4.BeautifulSoup(res.text,'lxml')
d = []
for i in soup.select('.text'):
  d.append(i.text)
print(d)

#inspect the site to extract the top 10 tags

test_case = int(input("Enter number of books(test case) : "))
bookkart = []
def Bookkart(bookid, bookname, author, price, available):
  bookkart.append([bookid,bookname,author,price,available])
for i in range(test_case):
  Bookkart(int(input("bookid : ")),input("book name : "),input("author : "),int(input("price : ")),input("availability : "))
for j in range(test_case):
  if bookkart[j][4]=='yes' and bookkart[j][3]<300:
        print(bookkart[j])
print(sorted(bookkart,key = lambda x: x[2]))

"""blackjack game project in python"""

# 1-first we will distribute card to player and then dealer to himself
# 2-player will ask for carrd and we will give huim till he will ask
# 3-we will give cardto dealer till it's sum is less than 18\
# 4-when player stops to ask we will check the value
# 5- who gave greater value will win the game
# 6-if value is exact 21 then he will get 1.5x amount


# import random
# ranks = ["Ace","two","three","four","five","six","seven","eight","nine","ten","joker","queen","King"]
# cards_values = {"Ace": '11', "two":'2', "three":'3', "four":'4', "five":'5', "six":'6', "seven":'7', "eight":'8', "nine":'9', "ten":'10', "joker":'10', "queen":'10', "King":'10'}
# suits = ["Spades", "Hearts", "Clubs", "Diamonds"]
# class Card:
#   def __init__(self,suit,ranks):
#     self.suit=suit
#     self.ranks=ranks
# deck = []
# for suit in suits:
#   for card in ranks:
#     deck.append(Card(suit,card))


import random

suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values = {'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5, 'Six': 6, 'Seven': 7, 'Eight': 8,
          'Nine': 9, 'Ten': 10, 'Jack': 10, 'Queen': 10, 'King': 10, 'Ace': 11}


# CLASSES


class Card:  # Creates all the cards

    def __init__(self, suit, rank):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return self.rank + ' of ' + self.suit


class Deck:  # creates a deck of cards

    def __init__(self):
        self.deck = []  # haven't created a deck yet
        for suit in suits:
            for rank in ranks:
                self.deck.append(Card(suit, rank))

    def __str__(self):
        deck_comp = ''
        for card in self.deck:
            deck_comp += '\n ' + card.__str__()
        return 'The deck has: ' + deck_comp

    def shuffle(self):  # shuffle all the cards in the deck
        random.shuffle(self.deck)

    def deal(self):  # pick out a card from the deck
        single_card = self.deck.pop()
        return single_card
a = Deck()
print(a)

def inputinfile():
  id = int(input("Enter your id : "))
  name = input("Enter your name : ")
  sem = int(input("Enter your semester : "))
  a = int(input("enter no. of courses : "))
  courses = {}
  for i in range(a):
    courses[input("enter name of course ")] = input("enter attendance in this course ")
  file1 = open("myfile.txt","w")
  file1.write(str(id)+"\n")
  file1.write(name+"\n")
  file1.write(str(sem)+"\n")
  file1.write(str(courses)+"\n")
  file1.close()
  file2 = open("myfile.txt","r")
  print(file2.read())
  file2.close()
inputinfile()